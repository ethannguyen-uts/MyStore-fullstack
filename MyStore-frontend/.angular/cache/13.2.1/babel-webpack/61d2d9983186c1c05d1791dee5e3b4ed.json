{"ast":null,"code":"import { User } from '../models/user';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let CartService = /*#__PURE__*/(() => {\n  class CartService {\n    constructor() {\n      this.user = new User();\n      this.status = '';\n      this.listProduct = [];\n      this.total = 0;\n      this.totalQuantity = 0;\n      this.quantityObservable = new BehaviorSubject(this.total); //Get method\n\n      this.getCart = () => {\n        return this.listProduct;\n      }; //Modifying cart items\n\n\n      this.addToCart = (quantity, product) => {\n        product.quantity = quantity;\n        const productIndex = this.listProduct.findIndex(item => item.name === product.name);\n\n        if (productIndex == -1) {\n          this.listProduct.push(product);\n        } else {\n          this.listProduct[productIndex].quantity += quantity;\n        }\n\n        this.total += product.price * quantity;\n        this.totalQuantity = this.totalQuantity + quantity;\n        this.quantityObservable.next(this.totalQuantity);\n        return this.listProduct;\n      };\n\n      this.cartItemUpdate = product => {\n        const productIndex = this.listProduct.findIndex(item => item.name === product.name);\n\n        if (productIndex !== -1) {\n          if (product.quantity === 0) {\n            this.listProduct.splice(productIndex, 1);\n          } else {\n            this.listProduct[productIndex].quantity = product.quantity;\n          }\n\n          this.getTotal();\n          this.calculateTotalQuantity();\n          this.quantityObservable.next(this.totalQuantity);\n        }\n\n        return this.listProduct;\n      };\n\n      this.removeFromCart = product => {\n        const productIndex = this.listProduct.findIndex(item => item.name === product.name);\n\n        if (productIndex !== -1) {\n          this.listProduct.splice(productIndex, 1);\n          this.total = this.total - product.quantity * product.price;\n          this.totalQuantity = this.totalQuantity - product.quantity;\n          this.quantityObservable.next(this.totalQuantity);\n        }\n\n        return this.listProduct;\n      };\n\n      this.reduceQuantity = product => {\n        const productIndex = this.listProduct.findIndex(item => item.name === product.name);\n\n        if (productIndex !== -1) {\n          const productQuantity = this.listProduct[productIndex].quantity;\n          productQuantity > 1 ? this.listProduct[productIndex].quantity-- : this.listProduct.splice(productIndex, 1);\n          this.total -= this.listProduct[productIndex].price;\n          this.totalQuantity--;\n          this.quantityObservable.next(this.totalQuantity);\n        } else throw new Error('Product does not exists in the cart');\n\n        return this.listProduct;\n      };\n\n      this.refreshCart = () => {\n        this.listProduct = [];\n        this.total = 0;\n        this.totalQuantity = 0;\n        this.status = CART_STATUS.active;\n        this.quantityObservable.next(this.totalQuantity);\n      }; //Calculation\n\n\n      this.getTotal = () => {\n        const result = this.listProduct.reduce((a, b) => a + b.price * b.quantity, 0);\n        this.total = Math.round(result * 100) / 100;\n        return this.total;\n      };\n\n      this.calculateTotalQuantity = () => {\n        const result = this.listProduct.reduce((a, b) => a + b.quantity, 0);\n        this.totalQuantity = Math.round(result * 100) / 100;\n        return this.total;\n      }; //Set method\n\n\n      this.setUser = user => {\n        this.user = user;\n      };\n\n      this.setStatus = status => {\n        this.status = status;\n      }; //observe total quantity\n\n\n      this.getQuantityObservable = () => {\n        return this.quantityObservable.asObservable();\n      };\n    }\n\n  }\n\n  CartService.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)();\n  };\n\n  CartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac,\n    providedIn: 'root'\n  });\n  return CartService;\n})();\nexport const CART_STATUS = {\n  active: 'ACTIVE',\n  complete: 'COMPLETE'\n};","map":null,"metadata":{},"sourceType":"module"}